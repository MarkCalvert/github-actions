name: shipshape

on:
  workflow_call:
    inputs:
      shipshape-version:
        description: Version of shipshape to use.
        type: string
        required: false
        default: v1.0.0-alpha.1.5.0
      sdp-platform-rules-version:
        description: Version of SDP Platform Rules to use.
        type: string
        required: false
        default: v1.0.0
      table-output:
        description: Output format. Allowed values are 'junit', 'json', 'table', 'pretty', or 'config'.
        type: string
        required: false
        default: pretty
      fail-severity:
        description: Severity to fail on.
        type: string
        required: false
        default: high

# Add permissions block
permissions:
  checks: write
  contents: read
  pull-requests: write

env:
  REGISTRY: ghcr.io

jobs:
  audit:
    name: shipshape_audit
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/dpc-sdp/bay/ci-builder:6.x
    steps:
      - name: Validate inputs
        shell: bash
        run: |
          # Validate table-output
          case "${{ inputs.table-output }}" in
            "json"|"table"|"junit"|"pretty"|"config")
              echo "Valid output format: ${{ inputs.table-output }}"
              ;;
            *)
              echo "Error: Invalid value for table-output: '${{ inputs.table-output }}'"
              echo "Allowed values are 'json', 'table', 'junit', or 'pretty'."
              exit 1
              ;;
          esac

          # Validate fail-severity
          case "${{ inputs.fail-severity }}" in
            "high"|"normal"|"low")
              echo "Valid severity level: ${{ inputs.fail-severity }}"
              ;;
            *)
              echo "Error: Invalid value for fail-severity: '${{ inputs.fail-severity }}'"
              echo "Allowed values are 'high', 'normal', or 'low'."
              exit 1
              ;;
          esac
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get Cached Shipshape Binary
        id: cache-shipshape
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/shipshape
          key: shipshape-${{ inputs.shipshape-version }}
          restore-keys: |
            shipshape-
      - name: Download Shipshape if not cached
        if: steps.cache-shipshape.outputs.cache-hit != 'true'
        run: |
          # Download shipshape binary
          curl -L -o /usr/local/bin/shipshape https://github.com/salsadigitalauorg/shipshape/releases/download/${{ inputs.shipshape-version }}/shipshape-$(uname -s)-$(uname -m) && \
          chmod +x /usr/local/bin/shipshape
      - name: Get Cached SDP Platform Rules
        id: cache-sdp-rules
        uses: actions/cache@v4
        with:
          path: shipshape.yml
          key: sdp-platform-rules-${{ inputs.sdp-platform-rules-version }}
          restore-keys: |
            sdp-platform-rules-
      - name: Download SDP Platform Rules if not cached
        if: steps.cache-sdp-rules.outputs.cache-hit != 'true'
        run: |
          #curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -L -o shipshape.yml https://raw.githubusercontent.com/dpc-sdp/sdp-platform-rules/${{ inputs.sdp-platform-rules-version }}/shipshape.yml
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -L -o shipshape.yml https://raw.githubusercontent.com/MarkCalvert/sdp-platform-rules/refs/tags/${{ inputs.sdp-platform-rules-version }}/shipshape.yml
      - name: Get Cached yq Binary
        id: cache-yq
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/yq
          key: yq-latest
          restore-keys: |
            yq-
      - name: Download yq if not cached
        if: steps.cache-yq.outputs.cache-hit != 'true'
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod a+x /usr/local/bin/yq
      - name: Audit codebase
        id: audit
        shell: bash
        run: |
          # Create file extension based on table-output
          case "${{ inputs.table-output }}" in
            "json")
              file_extension=".json"
              ;;
            "table")
              file_extension=".txt" 
              ;;
            "junit")
              file_extension=".xml"
              ;;
            "pretty")
              file_extension=".txt"
              ;;
            "config")
              file_extension=".txt"
              ;;
          esac
          # Run shipshape, output to a file and get exit code
          if [ "${{ inputs.table-output }}" == "config" ]; then
            # Output config is set in shipshape.yml for stdout and file
            # Load shipshape.yml
            shipshape_config=$(cat shipshape.yml)
            # Search for file format in output config
            file_format=$(yq e '.output.file.format' shipshape.yml)
            echo "file_format=$file_format"
            # Search for file path in output config
            file_path=$(yq e '.output.file.path' shipshape.yml) 
            echo "file_format=$file_format"
            shipshape run . -f shipshape.yml --error-code --fail-severity ${{ inputs.fail-severity }} > shipshape-output$file_extension
          else
            shipshape run . -f shipshape.yml --error-code --output-format ${{ inputs.table-output }} --fail-severity ${{ inputs.fail-severity }} > shipshape-output$file_extension
            file_path=shipshape-output$file_extension
            echo "file_path=$file_path"
          fi
          # Set the file extension as an output
          echo "file_extension=$file_extension" >> $GITHUB_OUTPUT
          echo "file_path=$file_path" >> $GITHUB_OUTPUT
      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report
          path: shipshape-output${{ steps.audit.outputs.file_extension }}
      - name: Publish junit report
        uses: mikepenz/action-junit-report@v5
        if: always() && (inputs.table-output == 'junit' || steps.audit.outputs.file_format == 'junit')
        with:
          report_paths: "${{ steps.audit.outputs.file_path }}"
